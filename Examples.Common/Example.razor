<h1>Code Mirror 6 Wrapper Demo</h1>

<label for="Theme">Theme</label>
<select @bind=@Theme id="Theme">
    @foreach (var theme in Enum.GetValues(typeof(ThemeMirrorTheme)))
    {
        <option value="@theme">@theme</option>
    }
</select>

<label for="Language">Language</label>
<select @bind=@Language id="Language">
    @foreach (var language in Languages) {
        <option value="@language">@language.DisplayName()</option>
    }
</select>

<label for="tabSizeInput">TabSize:</label>
<input id="tabSizeInput" @bind-value=TabSize @bind-value:event="oninput" type="number" min="1" max="8" step="1" />

<label for="AutoFormatMarkdown">Auto-Format Markdown</label>
<input id="AutoFormatMarkdown" type="checkbox" @bind=@AutoFormatMarkdown />

<button class="btn btn-danger"
    @onclick=@(async () => {
        Text = code.Replace("\r", "");
        await InvokeAsync(StateHasChanged);
    })
>Reset text</button>


<div class="d-block">
    <label for="MergeView">Merge View</label>
    <input id="MergeView" type="checkbox" checked=@MergeViewEnabled @onchange=@(async v => {
        MergeViewEnabled = (v.Value as bool?) == true;
        if (MergeViewEnabled) {
            MergeViewConfiguration = PreviousMergeViewConfiguration ?? new() {
                Original = code,
                HighlightChanges = true,
                Gutter = true,
                MergeControls = true,
            };
        }
        else {
            PreviousMergeViewConfiguration = MergeViewConfiguration is null ? null : MergeViewConfiguration with {};
            MergeViewConfiguration = null;
        }
        await InvokeAsync(StateHasChanged);
    }) />

    @if (MergeViewConfiguration is not null) {
        <label for="MergeViewHighlightChanges">Highlight Changes</label>
        <input id="MergeViewHighlightChanges" type="checkbox" checked=@MergeViewConfiguration.HighlightChanges
             @onchange=@(v => {
                MergeViewConfiguration = MergeViewConfiguration with { HighlightChanges = v.Value as bool?};
            })
        />

        <label for="MergeViewGutter">Gutter</label>
        <input id="MergeViewGutter" type="checkbox" checked=@MergeViewConfiguration.Gutter
             @onchange=@(v => {
                MergeViewConfiguration = MergeViewConfiguration with { Gutter = v.Value as bool?};
            })
        />

        <label for="MergeViewMergeControls">Merge Controls</label>
        <input id="MergeViewMergeControls" type="checkbox" checked=@MergeViewConfiguration.MergeControls
             @onchange=@(async v => {
                MergeViewConfiguration = MergeViewConfiguration with { MergeControls = v.Value as bool?};
            })
        />
    }
</div>

<div class="d-block">
    <label for="HighlightTrailingWhitespace">Highlight Trailing Whitespace</label>
    <input id="HighlightTrailingWhitespace" type="checkbox" checked=@HighlightTrailingWhitespace @onchange=@(async v => {
        HighlightTrailingWhitespace = (v.Value as bool?) == true;
        await InvokeAsync(StateHasChanged);
    }) />

    <label for="HighlightWhitespace">Highlight Whitespace</label>
    <input id="HighlightWhitespace" type="checkbox" checked=@HighlightWhitespace @onchange=@(async v => {
        HighlightWhitespace = (v.Value as bool?) == true;
        await InvokeAsync(StateHasChanged);
    }) />
</div>

<label for="HighlightTrailingWhitespace">Read-only</label>
<input id="HighlightTrailingWhitespace" type="checkbox" checked=@ReadOnly @onchange=@(async v => {
    ReadOnly = (v.Value as bool?) == true;
    await InvokeAsync(StateHasChanged);
}) />

<button class="btn btn-primary"
    @onclick=@(async () => {
        Visible = !Visible;
        await InvokeAsync(StateHasChanged);
    })
>Toggle visibility</button>

<button class="btn btn-primary"
    @onclick=@(async () => {
        LocalStorageKey = "Key2";
        await InvokeAsync(StateHasChanged);
    })
>Change local storage key</button>

<button class="btn btn-primary"
    @onclick=@(async () => {
        if (codeMirror6WrapperRef.CommandDispatcher is not null)
        await codeMirror6WrapperRef.CommandDispatcher.Dispatch(CodeMirrorSimpleCommand.ScrollIntoView);
    })
>Scroll into view</button>

<button class="btn btn-primary"
    @onclick=@(async () => {
        if (codeMirror6WrapperRef.CommandDispatcher is not null)
        await codeMirror6WrapperRef.CommandDispatcher.Dispatch(CodeMirrorSimpleCommand.RequestLinterRefresh);
    })
>Refresh linter</button>

<button class="btn btn-primary"
    @onclick=@(() => codeMirror6WrapperRef.InitializeAsync())
>Re-initialize</button>

<CodeMirror6Wrapper
    @ref=@codeMirror6WrapperRef
    IsWASM=@IsWASM
    @bind-Doc=@Text
    Placeholder="Enter your code.... (1)"
    TabSize=@TabSize
    IndentationUnit=@TabSize
    @bind-Selection=@selectionRanges1
    Theme=@Theme
    Language=@Language
    AutoFormatMarkdown=@AutoFormatMarkdown
    LintDocument=@LintDocument
    Setup=@Setup
    ReplaceEmojiCodes=@ReplaceEmojiCodes
    GetMentionCompletions=@GetMentionCompletions
    UploadBrowserFile=@UploadBrowserFile
    Editable=@(!ReadOnly)
    ReadOnly=@ReadOnly
    LineNumbers=@(!ReadOnly)
    HighlightActiveLineGutter=@(!ReadOnly)
    ScrollPastEnd=@(!ReadOnly)
    DropCursor=@(!ReadOnly)
    DrawSelection=@(!ReadOnly)
    ShowMarkdownControlCharactersAroundCursor=@(!ReadOnly)
    PreviewImages=@true
    LineWrapping=@LineWrapping
    MergeViewConfiguration=@MergeViewConfiguration
    HighlightTrailingWhitespace=@HighlightTrailingWhitespace
    HighlightWhitespace=@HighlightWhitespace
    Visible=@Visible
    MarkdownStylesAtSelectionsChanged=@(styles => Styles = styles.ToList())
    FullScreen=@FullScreen
    LocalStorageKey=@LocalStorageKey
    MaxHeight="60em"
>
    <ContentBefore Context="c">
        <div class="toolbar sticky-top alert alert-info my-3">
            <button class=@ButtonClass(c.State, "StrongEmphasis") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownBold)) title="Toggle bold text (Ctrl-B)">
                <i class="fa fa-bold"></i>
            </button>
            <button class=@ButtonClass(c.State, "Emphasis") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownItalic)) title="Toggle italic text (Ctrl-I)">
                <i class="fa fa-italic"></i>
            </button>
            <button class=@ButtonClass(c.State, "Strikethrough") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownStrikethrough)) title="Toggle strike-through text">
                <i class="fa fa-strikethrough"></i>
            </button>
            <button class=@ButtonClass(c.State, "InlineCode") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownCode)) title="Toggle inline code text">
                <i class="fa fa-code"></i>
            </button>
            <button class=@ButtonClass(c.State, "FencedCode") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownCodeBlock)) title="Toggle code block text">
                <i class="fab fa-codepen"></i>
            </button>
            <button class=@ButtonClass(c.State, "Blockquote") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownQuote)) title="Toggle quoted text">
                <i class="fa fa-quote-right"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.IncreaseMarkdownHeadingLevel)) title="Increase Markdown heading level">
                <i class="fa fa-heading"></i> +
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.DecreaseMarkdownHeadingLevel)) title="Decrease Markdown heading level">
                <i class="fa fa-heading"></i> -
            </button>
            @for (var i = 1; i <= 6; i++) {
                var headingLevel = i; // Capture the current value of i in a local variable
                <button class=@ButtonClass(c.State, $"ATXHeading{headingLevel}") @onclick=@(() => c.Commands.Dispatch(CodeMirrorCommandOneParameter.ToggleMarkdownHeading, headingLevel)) title=@($"Toggle heading text {i}")>
                    <i class="fa fa-heading"></i> @($"{headingLevel}")
                </button>
            }
            <button class=@ButtonClass(c.State, "BulletList") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownUnorderedList)) title="Toggle unordered list">
                <i class="fa fa-list-ul"></i>
            </button>
            <button class=@ButtonClass(c.State, "OrderedList") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownOrderedList)) title="Toggle ordered list">
                <i class="fa fa-list-ol"></i>
            </button>
            <button class=@ButtonClass(c.State, "Task") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownTaskList)) title="Toggle task list">
                <i class="fa fa-tasks"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorCommandOneParameter.InsertOrReplaceText, "test")) title="Insert or replace text">
                Insert or replace text
            </button>
            <button class=@ButtonClass(c.State, "HorizontalRule") @onclick=@(() => c.Commands.Dispatch(CodeMirrorCommandOneParameter.InsertTextAbove, "\n---\n")) title="Insert separator above">
                <i class="fas fa-minus"></i>
            </button>
            <button class=@ButtonClass(ReplaceEmojiCodes) @onclick=@(() => ToggleEmojis(c.Commands)) title="Toggle replacing :emoji_codes: with the unicode character">
                <i class="far fa-smile"></i>
            </button>
            <button class=@ButtonClass(LineWrapping) @onclick=@(() => LineWrapping = !LineWrapping) title="Toggle long line wrapping">
                <i class="fas fa-paragraph"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.Undo)) title="Undo (Ctrl-Z)">
                <i class="fas fa-undo"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.Redo)) title="Redo (Ctrl-Y)">
                <i class="fas fa-redo"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.Cut)) title="Cut (Ctrl-X)">
                <i class="fas fa-scissors"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.Copy)) title="Copy (Ctrl-C)">
                <i class="fas fa-copy"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.Paste)) title="Paste (Ctrl-V)">
                <i class="fas fa-paste"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ClearLocalStorage)) title="Clear local storage">
                <i class="fas fa-trash"></i>
            </button>
            <button class=@ButtonClass(FullScreen) @onclick=@(() => FullScreen = !FullScreen) title="Toggle full-screen mode">
                <i class=@(FullScreen ? "fas fa-window-restore" : "fas fa-window-maximize")></i>
            </button>
        </div>
    </ContentBefore>
</CodeMirror6Wrapper>

<pre>@Text?.Split("\n").Count() Line(s)</pre>
<hr />

@if (selectionRanges1 is not null) {
    <div>
        Selection ranges:
    </div>
    @foreach(var range in selectionRanges1) {
        <div>
            From @range.From
            To @range.To
        </div>
    }
    <hr />
}

@foreach (var s in Styles) {
    <p>
        @s
    </p>
}


<CodeMirror6Wrapper
    IsWASM=@IsWASM
    Placeholder="Enter your code.... (2)"
    @bind-Doc=@Text2
    @bind-Selection=@selectionRanges2
    Theme=@Theme
    Language=@CodeMirrorLanguage.Markdown
    AutoFormatMarkdown=@AutoFormatMarkdown
    LintDocument=@LintDocument
    AllowHorizontalResize
    AllowVerticalResize=false
    MaxDocumentLength=10
    EmbedUploadsAsDataUrls
/>

<pre>@Text2?.Split("\n").Count() Line(s)</pre>
<hr />

@if (selectionRanges2 is not null) {
    <div>
        Selection ranges:
    </div>
    @foreach(var range in selectionRanges2) {
        <div>
            From @range.From
            To @range.To
        </div>
    }
    <hr />
}

<CodeMirror6Wrapper
    IsWASM=@IsWASM
    @bind-Doc=@Text3
    Placeholder=@PlaceHolderText
    @bind-Selection=@selectionRanges3
    Theme=@Theme
    Language=@CodeMirrorLanguage.Markdown
    AutoFormatMarkdown=@AutoFormatMarkdown
    LintDocument=@LintDocument
    AllowHorizontalResize=false
    AllowVerticalResize=false
    Height="20em"
/>

<pre>@Text3?.Split("\n").Count() Line(s)</pre>
<hr />

@if (selectionRanges3 is not null) {
    <div>
        Selection ranges:
    </div>
    @foreach(var range in selectionRanges3) {
        <div>
            From @range.From
            To @range.To
        </div>
    }
    <hr />
}

<button class="btn btn-sm btn-primary"
    @onclick=@(async () => {
        PlaceHolderText = NewPlaceHolderText;
        await InvokeAsync(StateHasChanged);
    })
>Change placeholder text</button>


@code
{
    [Parameter] public bool IsWASM { get; set; }

    private CodeMirror6Wrapper codeMirror6WrapperRef = null!;

    private string? Text = code;
    private string? Text2 = "# Example 2";
    private string? Text3;
    private int TabSize = 4;
    private bool ReadOnly;
    private List<SelectionRange>? selectionRanges1;
    private List<SelectionRange>? selectionRanges2;
    private List<SelectionRange>? selectionRanges3;
    private string PlaceHolderText = "Enter your code.... (3)";
    private string NewPlaceHolderText = "New placeholder text !";
    private ThemeMirrorTheme Theme = ThemeMirrorTheme.OneDark;
    private CodeMirrorLanguage Language = CodeMirrorLanguage.Markdown;
    private bool AutoFormatMarkdown = true;
    private bool ReplaceEmojiCodes = false;
    private bool LineWrapping = true;
    private bool MergeViewEnabled = false;
    private bool HighlightTrailingWhitespace = true;
    private bool HighlightWhitespace = false;
    private bool Visible = true;
    private bool FullScreen = false;
    private string LocalStorageKey = "CodeMirror6WrapperDemo";
    private List<CodeMirrorLanguage> Languages =>
        Enum.GetValues<CodeMirrorLanguage>()
            .OrderBy(l => l == CodeMirrorLanguage.PlainText ? 0 : 1)
            .ThenBy(l => l.ToString())
            .ToList();
    private readonly CodeMirrorSetup Setup = new() {
        HighlightSelectionMatches = true,
        ScrollToEnd = true,
        BindMode = DocumentBindMode.OnDelayedInput,
        DebugLogs = true,
    };
    private UnifiedMergeConfig? PreviousMergeViewConfiguration;
    private UnifiedMergeConfig? MergeViewConfiguration;
    private string ButtonClass(CodeMirrorState state, string docStyleTag = "") => ButtonClass(state.MarkdownStylesAtSelections?.Contains(docStyleTag) == true);
    private string ButtonClass(bool enabled) => enabled
        ? "btn btn-sm btn-primary"
        : "btn btn-sm btn-outline-secondary";
    private List<string> Styles = [];

    private async Task ToggleEmojis(CMCommandDispatcher commands)
    {
        ReplaceEmojiCodes = !ReplaceEmojiCodes;
        await commands.Dispatch(CodeMirrorSimpleCommand.Focus);
    }

    private Task<List<CodeMirrorDiagnostic>> LintDocument(string code, CancellationToken cancellationToken)
    {
        var result = new List<CodeMirrorDiagnostic>();
        var position = 0;
        foreach (var line in code.Split('\n')) {
            cancellationToken.ThrowIfCancellationRequested();
            var subLine = line;
            var offset = 0;
            while (subLine.Contains("error")) {
                var indexOfError = subLine.IndexOf("error");
                var errorLength = "error".Length;
                result.Add(
                    new CodeMirrorDiagnostic {
                        From = position + indexOfError + offset,
                        To = position + indexOfError + errorLength + offset,
                        Severity = "error",
                        Message = "Error message",
                        Source = "Custom linter"
                    }
                );
                offset += indexOfError + errorLength;
                subLine = subLine.Substring(indexOfError + errorLength);
            }
            position += line.Length + 1;
        }
        return Task.FromResult(result);
    }

    private async Task<string> UploadBrowserFile(IBrowserFile file)
    {
        var fileBytes = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(fileBytes);
        var base64 = Convert.ToBase64String(fileBytes);
        var mimeType = file.ContentType;

        return $"data:{mimeType};base64,{base64}";
    }
}
