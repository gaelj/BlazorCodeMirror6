@page "/example3"


<h1>Code Mirror 6 Wrapper Demo</h1>

<h4>Scroll test</h4>

<p style="height: 110vh">
    Big empty paragraph to make the page scrollable
</p>

<CodeMirror6Wrapper
    @bind-Doc=@Text
    Placeholder="Upload a file by dropping it or pasting it here"
    TabSize=@TabSize
    IndentationUnit=@TabSize
    Theme=@Theme
    Language=@Language
    AutoFormatMarkdown=@AutoFormatMarkdown
    Setup=@Setup
    PreviewImages=@true
    FullScreen=@FullScreen
    LocalStorageKey=@LocalStorageKey
    MaxHeight="60em"
>
    <ContentBefore Context="c">
        <div class="toolbar sticky-top alert alert-info my-3">
            <button class=@ButtonClass(c.State, "StrongEmphasis") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownBold)) title="Toggle bold text (Ctrl-B)">
                <i class="fa fa-bold"></i>
            </button>
            <button class=@ButtonClass(c.State, "Emphasis") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownItalic)) title="Toggle italic text (Ctrl-I)">
                <i class="fa fa-italic"></i>
            </button>
            <button class=@ButtonClass(c.State, "Strikethrough") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownStrikethrough)) title="Toggle strike-through text">
                <i class="fa fa-strikethrough"></i>
            </button>
            <button class=@ButtonClass(c.State, "InlineCode") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownCode)) title="Toggle inline code text">
                <i class="fa fa-code"></i>
            </button>
            <button class=@ButtonClass(c.State, "FencedCode") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownCodeBlock)) title="Toggle code block text">
                <i class="fab fa-codepen"></i>
            </button>
            <button class=@ButtonClass(c.State, "Blockquote") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownQuote)) title="Toggle quoted text">
                <i class="fa fa-quote-right"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.IncreaseMarkdownHeadingLevel)) title="Increase Markdown heading level">
                <i class="fa fa-heading"></i> +
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.DecreaseMarkdownHeadingLevel)) title="Decrease Markdown heading level">
                <i class="fa fa-heading"></i> -
            </button>
            @for (var i = 1; i <= 6; i++) {
                var headingLevel = i; // Capture the current value of i in a local variable
                <button class=@ButtonClass(c.State, $"ATXHeading{headingLevel}") @onclick=@(() => c.Commands.Dispatch(CodeMirrorCommandOneParameter.ToggleMarkdownHeading, headingLevel)) title=@($"Toggle heading text {i}")>
                    <i class="fa fa-heading"></i> @($"{headingLevel}")
                </button>
            }
            <button class=@ButtonClass(c.State, "BulletList") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownUnorderedList)) title="Toggle unordered list">
                <i class="fa fa-list-ul"></i>
            </button>
            <button class=@ButtonClass(c.State, "OrderedList") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownOrderedList)) title="Toggle ordered list">
                <i class="fa fa-list-ol"></i>
            </button>
            <button class=@ButtonClass(c.State, "Task") @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ToggleMarkdownTaskList)) title="Toggle task list">
                <i class="fa fa-tasks"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorCommandOneParameter.InsertOrReplaceText, "test")) title="Insert or replace text">
                Insert or replace text
            </button>
            <button class=@ButtonClass(c.State, "HorizontalRule") @onclick=@(() => c.Commands.Dispatch(CodeMirrorCommandOneParameter.InsertTextAbove, "\n---\n")) title="Insert separator above">
                <i class="fas fa-minus"></i>
            </button>
            <button class=@ButtonClass(LineWrapping) @onclick=@(() => LineWrapping = !LineWrapping) title="Toggle long line wrapping">
                <i class="fas fa-paragraph"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.Undo)) title="Undo (Ctrl-Z)">
                <i class="fas fa-undo"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.Redo)) title="Redo (Ctrl-Y)">
                <i class="fas fa-redo"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.Cut)) title="Cut (Ctrl-X)">
                <i class="fas fa-scissors"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.Copy)) title="Copy (Ctrl-C)">
                <i class="fas fa-copy"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.Paste)) title="Paste (Ctrl-V)">
                <i class="fas fa-paste"></i>
            </button>
            <button class=@ButtonClass(c.State) @onclick=@(() => c.Commands.Dispatch(CodeMirrorSimpleCommand.ClearLocalStorage)) title="Clear local storage">
                <i class="fas fa-trash"></i>
            </button>
            <button class=@ButtonClass(FullScreen) @onclick=@(() => FullScreen = !FullScreen) title="Toggle full-screen mode">
                <i class=@(FullScreen ? "fas fa-window-restore" : "fas fa-window-maximize")></i>
            </button>
        </div>
    </ContentBefore>
</CodeMirror6Wrapper>


@code
{
    private string? Text = string.Empty;
    private int TabSize = 4;
    private ThemeMirrorTheme Theme = ThemeMirrorTheme.OneDark;
    private CodeMirrorLanguage Language = CodeMirrorLanguage.Markdown;
    private bool AutoFormatMarkdown = true;
    private bool LineWrapping = true;
    private bool FullScreen = false;
    private string LocalStorageKey = "CodeMirror6WrapperDemo_FileUpload";
    private readonly CodeMirrorSetup Setup = new() {
        BindMode = DocumentBindMode.OnDelayedInput,
    };
    private string ButtonClass(CodeMirrorState state, string docStyleTag = "") => ButtonClass(state.MarkdownStylesAtSelections?.Contains(docStyleTag) == true);
    private string ButtonClass(bool enabled) => enabled
        ? "btn btn-sm btn-primary"
        : "btn btn-sm btn-outline-secondary";
}
